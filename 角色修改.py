# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '角色修改.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import json
import sys
def path0(path):
    return os.path.join(os.path.dirname(sys.argv[0]),path)
def load_bin_file(bin_file_path):# bin文件的载入
    with open(bin_file_path, 'r', encoding='utf-8') as bin_file:
        return json.load(bin_file)
# 加载配置
def load_config():
    with open(resource_path('config.json'), 'r',encoding='utf-8') as config_file:
        return json.load(config_file)
def resource_path(relative_path):
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)
def load_translation_file(filepath):#各项选项的翻译
    with open(filepath, 'r', encoding='utf-8') as file:
        return json.load(file)

def get_CharName(bin_data, i):#获取角色存档内名称
    return bin_data['playerData']['m_WayfinderLevelStatusData']['m_WayfinderLevelStatus'][i]['wayfinderHandle']['rowName']

def trans_text(translation_data, text, name):#转换存档名称
    return translation_data[text][name]

def find_current_exp(non_fungible_items, target_name):#角色经验
    for item in non_fungible_items:
        if item.get('name') == target_name:
            exp = item.get('spec', {}).get('itemSpec',{}).get('currentExp')
            awk = item.get('spec', {}).get('itemSpec',{}).get('currentAwakeningLevel')
            return exp,awk
    return None

def find_ability(non_fungible_items, target_name):#角色能力
    for item in non_fungible_items:
        if item.get('name') == target_name:
            exp = item.get('spec', {}).get('itemSpec',{}).get('currentExp')
            return exp
    return None

class Ui_Form(object):
    path = path0(load_config()['output_path_1'])
    translation_path = path0(load_config()["trans_path"])

    def setupUi(self, Form, i):
        Form.setObjectName("Form")
        Form.resize(605, 447)
        self.img = QtWidgets.QLabel(Form)
        self.img.setGeometry(QtCore.QRect(180, 40, 200, 200))
        self.img.setObjectName("img")
        self.name = QtWidgets.QLabel(Form)
        self.name.setGeometry(QtCore.QRect(133, 250, 81, 20))
        self.name.setObjectName("name")
        self.CharName = QtWidgets.QLabel(Form)
        self.CharName.setGeometry(QtCore.QRect(230, 250, 221, 20))
        self.CharName.setObjectName("CharName")
        self.expedit = QtWidgets.QLineEdit(Form)
        self.expedit.setGeometry(QtCore.QRect(230, 277, 113, 20))
        self.expedit.setObjectName("expedit")
        self.exp = QtWidgets.QLabel(Form)
        self.exp.setGeometry(QtCore.QRect(133, 280, 81, 20))
        self.exp.setObjectName("exp")
        self.awak = QtWidgets.QLabel(Form)
        self.awak.setGeometry(QtCore.QRect(133, 310, 81, 20))
        self.awak.setObjectName("awak")
        self.awakedit = QtWidgets.QLineEdit(Form)
        self.awakedit.setGeometry(QtCore.QRect(230, 310, 113, 20))
        self.awakedit.setObjectName("awakedit")
        self.qinhe = QtWidgets.QLabel(Form)
        self.qinhe.setGeometry(QtCore.QRect(133, 340, 81, 20))
        self.qinhe.setObjectName("qinhe")
        self.qinhe1 = QtWidgets.QLineEdit(Form)
        self.qinhe1.setGeometry(QtCore.QRect(230, 340, 71, 20))
        self.qinhe1.setObjectName("qinhe1")
        self.qinhe2 = QtWidgets.QLineEdit(Form)
        self.qinhe2.setGeometry(QtCore.QRect(320, 340, 71, 20))
        self.qinhe2.setObjectName("qinhe2")
        self.qinhe3 = QtWidgets.QLineEdit(Form)
        self.qinhe3.setGeometry(QtCore.QRect(410, 340, 71, 20))
        self.qinhe3.setObjectName("qinhe3")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(133, 370, 81, 20))
        self.label.setObjectName("label")
        self.skill1 = QtWidgets.QLineEdit(Form)
        self.skill1.setGeometry(QtCore.QRect(230, 370, 51, 20))
        self.skill1.setObjectName("skill1")
        self.skill2 = QtWidgets.QLineEdit(Form)
        self.skill2.setGeometry(QtCore.QRect(290, 370, 51, 20))
        self.skill2.setObjectName("skill2")
        self.skill3 = QtWidgets.QLineEdit(Form)
        self.skill3.setGeometry(QtCore.QRect(350, 370, 51, 20))
        self.skill3.setObjectName("skill3")
        self.skill4 = QtWidgets.QLineEdit(Form)
        self.skill4.setGeometry(QtCore.QRect(410, 370, 51, 20))
        self.skill4.setObjectName("skill4")
        self.save = QtWidgets.QPushButton(Form)
        self.save.setGeometry(QtCore.QRect(490, 20, 75, 23))
        self.save.setObjectName("save")

        self.retranslateUi(Form)
        self.load_data(i)
        self.save.clicked.connect(lambda: self.save_data(i))
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "角色修改"))
        self.name.setText(_translate("Form", "角色名称："))
        self.exp.setText(_translate("Form", "角色经验："))
        self.awak.setText(_translate("Form", "觉醒等级："))
        self.qinhe.setText(_translate("Form", "亲和等级："))
        self.label.setText(_translate("Form", "技能等级："))
        self.save.setText(_translate("Form", "保存"))

    def load_data(self, i):
        self.bin_data = load_bin_file(self.path)
        self.translation_data = load_translation_file(self.translation_path)
        self.non_fungible_items = self.bin_data['playerData']['m_InventoryData']['m_NonFungibleItems']

        char_name = get_CharName(self.bin_data, i)
        self.CharName.setText(trans_text(self.translation_data, char_name, 'name'))

        exp, awk = find_current_exp(self.non_fungible_items, char_name)
        self.expedit.setText(str(exp))
        self.awakedit.setText(str(awk))

        for j in range(1, 5):
            ability_name = f'ability{j}'
            skill_edit = getattr(self, f'skill{j}')
            skill_edit.setText(str(find_ability(self.non_fungible_items, trans_text(self.translation_data, char_name, ability_name))))

        for j in range(1, 4):
            aspect_name = f'aspect{j}'
            qinhe_edit = getattr(self, f'qinhe{j}')
            qinhe_edit.setText(str(find_ability(self.non_fungible_items, trans_text(self.translation_data, char_name, aspect_name))))

        self.img.setPixmap(QtGui.QPixmap(os.path.join(path0('角色图片'), trans_text(self.translation_data, char_name, 'img'))))

    def save_data(self, i):
        char_name = get_CharName(self.bin_data, i)

        for item in self.non_fungible_items:
            if item.get('name') == char_name:
                item['spec']['itemSpec']['currentExp'] = int(self.expedit.text())
                item['spec']['itemSpec']['currentAwakeningLevel'] = int(self.awakedit.text())

        for j in range(1, 5):
            ability_name = f'ability{j}'
            for item in self.non_fungible_items:
                if item.get('name') == trans_text(self.translation_data, char_name, ability_name):
                    item['spec']['itemSpec']['currentExp'] = int(getattr(self, f'skill{j}').text())

        for j in range(1, 4):
            aspect_name = f'aspect{j}'
            for item in self.non_fungible_items:
                if item.get('name') == trans_text(self.translation_data, char_name, aspect_name):
                    item['spec']['itemSpec']['currentExp'] = int(getattr(self, f'qinhe{j}').text())

        with open(self.path, 'w', encoding='utf-8') as bin_file:
            json.dump(self.bin_data, bin_file, ensure_ascii=False, indent=2)
            QtWidgets.QMessageBox.information(None, '提示', '保存成功！')

def modify_char(i):
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form, i)  # Provide the appropriate index here
    Form.show()
    sys.exit(app.exec_())
